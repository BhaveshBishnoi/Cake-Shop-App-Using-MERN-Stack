import { CSSProperties } from 'react';
import type { SPEObject, SplineEvent, SplineEventName } from '@splinetool/runtime';
export type { SPEObject, SplineEvent, SplineEventName };
interface SplineProps {
    scene: string;
    id?: string;
    style?: CSSProperties;
    onLoad?: () => void;
    onMouseDown?: (e: SplineEvent) => void;
    onMouseUp?: (e: SplineEvent) => void;
    onMouseHover?: (e: SplineEvent) => void;
    onKeyDown?: (e: SplineEvent) => void;
    onKeyUp?: (e: SplineEvent) => void;
    onStart?: (e: SplineEvent) => void;
    onLookAt?: (e: SplineEvent) => void;
    onFollow?: (e: SplineEvent) => void;
}
export interface SplineRef {
    /**
     *  Searches through scene's children and returns the object with that uuid
     * @param uuid	String to match to the object's uuid
     * @returns SPEOject
     */
    findObjectById: (uuid: string) => SPEObject | undefined;
    /**
     * Searches through scene's children and returns the first object with that name
     * @param  {string}	name String to match to the object's name
     * @returns SPEOject
     */
    findObjectByName: (name: string) => SPEObject | undefined;
    /**
     * Triggers a Spline event associated to an object with provided uuid.
     * Starts from first state to last state.
     * @param {string} eventName String that matches Spline event's name
     * @param {string} uuid String to match to the object's uuid
     */
    emitEvent: (eventName: SplineEventName, uuid: string) => void;
    /**
     * Triggers a Spline event associated to an object with provided uuid in reverse order.
     * Starts from last state to first state.
     * @param {string} eventName String that matches Spline event's name
     * @param {string}	uuid String to match to the object's uuid
     */
    emitEventReverse: (eventName: SplineEventName, uuid: string) => void;
}
export declare const Spline: import("react").ForwardRefExoticComponent<SplineProps & import("react").RefAttributes<SplineRef>>;
